---
title: "Take-home Exercise 2: Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods"
author: Yi Ying TAN
execute: 
  warning: false
  message: false
editor: visual
---

## Overview

In this take-home exercise we are trying to create regions in Nigeria to reveal patterns of geospatial attributes. Regionalization is a clustering technique used to group observations that are similar in their statistical attributes, but also in their spatial location. Regionalization embeds the standard clustering logic as well as a series of geographical constraints that relate to connectivity.

## Getting Started

### The Data

We will continue our work from Take-home Exercise 1 and will be using the same data sources :

1.  Water point geospatial data - obtained from [WPDx Global Data Repositories](https://www.waterpointdata.org/access-data/) - The repository is a cloud based data library that stores the water point related data from rural areas at the water point or small water scheme level collected by the WPDx project.
2.  Nigeria LGA boundary data - Nigeria Level-2 Administrative Boundary (also known as Local Government Area) polygon features GIS data downloaded from [geoBoundaries](https://www.geoboundaries.org/) website.

### Setting the tools

We start by ensuring we have all the required R packages installed and loaded. The few key packages used and their purposes as follows:

-   **sf, rgdal** and **spdep** - spatial data handling

-   **tidyverse**, especially **readr**, **ggplot2** and **dplyr** - attribute data handling

-   **tmap** - choropleth mapping

-   **coorplot**, **ggpubr**, **ggparcoord** and **heatmaply** - multivariate data visualization and analysis

-   **cluster** and **ClustGeo** - cluster analysis

-   **funModeling** - for quick Exploratory Data Analysis.

The code chunk below installs and loads these R packages.

```{r}
pacman::p_load(rgdal, spdep, tmap, sf, funModeling,
               ggpubr, cluster, factoextra, NbClust,
               heatmaply, corrplot, psych, tidyverse, ClustGeo, GGally)
```

## Data Preparation

### Importing water point geospatial data

```{r}
#| eval: false
wp <- st_read(dsn = "geodata", 
              layer = "geo_export",
              crs = 4326) %>%
  filter(clean_coun == "Nigeria") 
```

Next, we save the extracted sf data table into an output file in rds data format and save in the Geodata file.

```{r}
#| eval: false
write_rds(wp,"geodata/wp_nga.rds")
```

### Importing Nigeria LGA boundary data

```{r}
#| eval: false
nga <- st_read(dsn = "geodata",
               layer = "geoBoundaries-NGA-ADM2",
               crs = 4326)
```

### Data Wrangling

We see many NA in the *status_cle* field, below code chunk is used to recode all *NA* status into *Unknown*.

```{r}
#| eval: false
wp_nga <- read_rds("geodata/wp_nga.rds") %>%
  rename ("Country" = "clean_coun",
          "clean_adm2" = "clean_adm2",
          "lat" = "lat_deg",
          "long" = "lon_deg") %>%
  mutate(status_cle = replace_na(status_cle, "Unknown"))

wp_nga_sf <- st_as_sf(wp_nga, coords = c("long", "lat"),  crs = 4326)
```

### Projection Transformation

Next, we transform the coordinates from 4326 to 26391 projection using *st_transform()* function.

```{r}
#| eval: false
wp_nga_sf <- st_transform(wp_nga_sf, crs = 26391)
nga <- nga %>%
  st_transform(crs = 26391)

st_crs (nga)
st_crs (wp_nga_sf)
```

### Visualizing water point distribution

We can use the simple function *freq()* of funModeling package to display the distribution of *status_cle* field.

```{r}
#| eval: false
freq(data=wp_nga_sf,
     input = 'status_cle')
```

![](images/paste-571A65D4.png)

### Extracting Water Point Data

#### Extracting functional water point

If we look at the first EDA results, we know that there are a few that falls under the 'functional' category.

```{r}
#| eval: false
wpt_functional <- wp_nga_sf %>%
  filter(status_cle %in%
           c("Functional", 
             "Functional but not in use",
             "Functional but needs repair"))
```

```{r}
#| eval: false
freq(data=wpt_functional,
     input = 'status_cle')
```

![](images/paste-20F9D3E9.png)

#### Extracting non-functional water point

```{r}
#| eval: false
wpt_nonfunctional <- wp_nga_sf %>%
  filter(status_cle %in%
           c("Non-Functional", 
             "Non-Functional due to dry season",
             "Abandoned/Decommissioned",
             "Abandoned",
             "Non functional due to dry season"))
```

```{r}
#| eval: false
freq(data=wpt_nonfunctional,
     input = 'status_cle')
```

![](images/paste-8F514D32.png)

#### Extracting water point with unknown status

```{r}
#| eval: false
wpt_unknown <- wp_nga_sf %>%
  filter(status_cle %in%
           c("Unknown"))
```

Looking at the data, the results is the same as the first EDA, there are 10656 water point with unknown status.

#### Extracting water point using the main technology

```{r}
#| eval: false
wpt_handpump <- wp_nga_sf %>%
  filter(X_water_tec %in%
           c("Hand Pump"))
```

#### Extracting the usage capacity of water points

```{r}
#| eval: false
wpt_lowuse <- wp_nga_sf %>%
  filter(usage_cap < 1000)
```

```{r}
#| eval: false
wpt_highuse <- wp_nga_sf %>%
  filter(usage_cap >= 1000)
```

#### Extracting rural water points

```{r}
#| eval: false
wpt_rural <- wp_nga_sf %>%
  filter(is_urban %in%
           c("False"))
```

### Performing Point-in-Polygon Count

```{r}
#| eval: false
nga_wp <- nga %>% 
  mutate(`total wpt` = lengths(
    st_intersects(nga, wp_nga_sf))) %>%
  mutate(`wpt functional` = lengths(
    st_intersects(nga, wpt_functional))) %>%
  mutate(`wpt non-functional` = lengths(
    st_intersects(nga, wpt_nonfunctional))) %>%
  mutate(`wpt unknown` = lengths(
    st_intersects(nga, wpt_unknown))) %>%
  mutate(`wpt hand pump` = lengths(
    st_intersects(nga, wpt_handpump))) %>%
  mutate(`wpt high usage` = lengths(
    st_intersects(nga, wpt_highuse))) %>%
  mutate(`wpt low usage` = lengths(
    st_intersects(nga, wpt_lowuse))) %>% 
  mutate(`wpt rural` = lengths(
    st_intersects(nga, wpt_rural)))  
```

### Saving the Analytical Data Table

```{r}
#| eval: false
nga_wp <- nga_wp %>%
  mutate(`pct_functional` = `wpt functional`/`total wpt`) %>%
  mutate(`pct_non_functional` = `wpt non-functional`/`total wpt`) %>%
  mutate(`pct_handpump` = `wpt hand pump`/`total wpt`) %>%
  mutate(`pct_highusage` = `wpt high usage`/`total wpt`) %>%
  mutate(`pct_lowusage` = `wpt low usage`/`total wpt`) %>%
  mutate(`pct_rural` = `wpt rural`/`total wpt`)
```

Saving the sf data table with analysis into rds format.

```{r}
#| eval: false
write_rds(nga_wp, "geodata/nga_wp.rds")
```

```{r}
nga_wp <- read_rds("geodata/nga_wp.rds") %>%
  mutate(pct_functional = replace_na(pct_functional, 0)) %>%
  mutate(pct_non_functional = replace_na(pct_non_functional, 0)) %>%
  mutate(pct_handpump = replace_na(pct_handpump, 0)) %>%
  mutate(pct_highusage = replace_na(pct_highusage, 0)) %>%
  mutate(pct_lowusage = replace_na(pct_lowusage, 0)) %>% 
  mutate(pct_rural = replace_na(pct_rural, 0)) 
```

## Exploratory Data Analysis

### EDA using statistical graphs

We will use histogram to look at the overall distribution of the data values.

```{r}
functional <- ggplot(data=nga_wp, 
             aes(x= `wpt functional`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="green")

nonfunctional <- ggplot(data=nga_wp, 
             aes(x= `wpt non-functional`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="green")

handpump <- ggplot(data=nga_wp, 
             aes(x= `wpt hand pump`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="green")

highuse <- ggplot(data=nga_wp, 
             aes(x= `wpt high usage`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="green")

lowuse <- ggplot(data=nga_wp, 
             aes(x= `wpt low usage`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="green")

rural <- ggplot(data=nga_wp, 
             aes(x= `wpt rural`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="green")
```

```{r}
ggarrange(functional, nonfunctional, handpump, highuse, lowuse, rural, 
          ncol = 3, 
          nrow = 2)
```

We see that the value range for the variables are quite similar, as such we do not need to standardize the input variables.

## Correlation Analysis

```{r}
cluster_vars <- nga_wp %>%
  st_set_geometry(NULL)
cluster_vars.cor = cor(cluster_vars[,14:19])
corrplot.mixed(cluster_vars.cor,
         lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black")
```

The correlation plot shows that pct_highusage and pct_lowusage are highly correlated (understandably given these 2 variables should add up to be 1), we will remove one of them and only use pct_highusage in the cluster analysis.

## Hierarchy Cluster Analysis

### Extracting clustering variables

```{r}
cluster_vars <- nga_wp %>%
  st_set_geometry(NULL) %>%
  select("shapeName", "pct_functional", "pct_non_functional", "pct_handpump", "pct_highusage", "pct_rural")
head(cluster_vars,10)
```

Notice we have not included pct_lowusage because it is highly correlated with pct_highusage.

Next, we will change the row numbers to township name by using code chunk below.

```{r}
row.names(cluster_vars) <- make.names(cluster_vars$"shapeName", unique = TRUE)
head(cluster_vars,10)
```

We can see that the row numbers are now replaced by unique township names.

Now, we will delete the shapeName field.

```{r}
nga_wp_cv <- select(cluster_vars,c(2:6))
head(nga_wp_cv, 10)
```

### Computing proximity matrix

We will compute the proximity matrix by using *dist()* of R. *dist()* supports 6 distance proximity calculations: **euclidean** (default)**, maximum, manhattan, canberra, binary** and **minkowski**.

```{r}
proxmat <- dist(nga_wp_cv, method = 'euclidean')
```

```{r}
#| eval: false
proxmat
```

### Computing hierarchical clustering

The code chunk below performs hierarchical cluster analysis using ward.D method. The hierarchical clustering output is stored in an object of class **hclust** which describes the tree produced by the clustering process.

```{r}
hclust_ward <- hclust(proxmat, method = 'ward.D')
```

Now, we can plot the tree.

```{r}
plot(hclust_ward, cex = 0.08)
```

### Selecting the optimal clustering algorithm

The identification of stronger clustering structures is one of the challenges we face when performing hierarchical clustering. We can solve this using *agnes()* function of **cluster** package, which will compute the agglomerative coefficients of all hierarchical clustering algorithms. (Values closer to 1 suggest strong clustering structure)

```{r}
m <- c( "average", "single", "complete", "ward")
names(m) <- c( "average", "single", "complete", "ward")

ac <- function(x) {
  agnes(nga_wp_cv, method = x)$ac
}

map_dbl(m, ac)
```

We see from the results that Ward's method will provide the strongest clustering structure, hence we will be using Ward for the subsequent analysis in this exercise.

### Determining optimal clusters

There are 3 commonly used methods to determine the optimal clusters:

-   Elbow Method

-   Average Silhouette Method

-   Gap Statistic Method

#### Gap Statistic Method

The gap statistics compares the total within intra-cluster variation for different values of k with their expected values under null reference distribution of the data. The estimate of the optimal clusters will be the value that maximize the gap statistic (i.e., that yields the largest gap statistic). This means that the clustering structure is far away from the random uniform distribution of points.

```{r}
set.seed(12345)
gap_stat <- clusGap(nga_wp_cv, 
                    FUN = hcut, 
                    nstart = 25, 
                    K.max = 10, 
                    B = 50)
# Print the result
print(gap_stat, method = "firstmax")
```

Next, we can visualize the results.

```{r}
fviz_gap_stat(gap_stat)
```

If we look at the gap statistic graph, the recommended number of cluster to retain is **9**.

### Interpreting the dendrograms

In the dendrogram above, each leaf corresponds to one observation. As we move up the tree, observations that are similar to each other are combined into branches, which are themselves fused at a higher height.

The height of the fusion, provided on the vertical axis, indicates the similarity (or dissimilarity) between two observations. The higher the height of the fusion, the less similar the observations are.

We can draw the dendrogram with a border around the selected clusters.

```{r}
plot(hclust_ward, cex = 0.3)
rect.hclust(hclust_ward, 
            k = 9, 
            border = 2:5)
```

### Visually-driven hierarchical clustering analysis

In this section we will build both highly interactive and static cluster heatmaps using **heatmaply**.

#### Transforming the data frame into matrix

```{r}
nga_wp_cv_mat <- data.matrix(nga_wp_cv)
```

#### Plotting interactive cluster heatmap

```{r}
heatmaply(normalize(nga_wp_cv_mat),
          Colv=NA,
          dist_method = "euclidean",
          hclust_method = "ward.D",
          seriate = "OLO",
          colors = Greens,
          k_row = 6,
          margins = c(NA,200,60,NA),
          fontsize_row = 4,
          fontsize_col = 5,
          main="Geographic Segmentation of Nigeria by Water Point indicators",
          xlab = "Water Point Indicators",
          ylab = "Townships of Nigeria"
          )
```

### Mapping the clusters found

After examining the dendogram above, we decide to retained 9 clusters.

```{r}
groups <- as.factor(cutree(hclust_ward, k=9))
```

But to visualize the clusters, the 9 groups need to be appended onto *nga_wp* simple feature object. Below code chunk is used to perform 3 steps:

-   convert the *groups* list object to a matrix

-   Use *cbind()* to append groups matrix onto *nga_wp*

-   rename *as.matrix.groups* field to *CLUSTER*

```{r}
nga_wp_cluster <- cbind(nga_wp, as.matrix(groups)) %>%
  rename(`CLUSTER`=`as.matrix.groups.`)
```

After, we will plot the choropleth map.

```{r}
qtm(nga_wp_cluster, "CLUSTER")
```

We see above that the clusters are fragmented. This is one of the common limitations of non-spatial clustering algo such as hierarchical cluster analysis.

## Spatially Constrained Clustering - SKATER

### Converting into spatial polygon data frame

First, we need to convert *nga_wp* into spatial polygon data frame. This is because SKATER function only support **sp** objects. We will use below code chunk for the conversion.

```{r}
nga_wp_sp <- as_Spatial(nga_wp)
```

### Computing neighbor list

```{r}
nga_wp.nb <- poly2nb(nga_wp_sp)
summary(nga_wp.nb)
```

We see that there is 1 region with no link, we will remove that from the list of townships from both neighbor list and the list of clustering variables.

```{r}
nga_wp <- nga_wp[-86,]
nga_wp_cv_neighbor <- nga_wp_cv[-86,]
nga_wp_sp_neighbor <- as_Spatial(nga_wp)
```

```{r}
nga_wp.neighbor <- poly2nb(nga_wp_sp_neighbor)
summary(nga_wp.neighbor)
```

```{r}
plot(nga_wp_sp_neighbor, 
     border=grey(.5))
plot(nga_wp.neighbor, 
     coordinates(nga_wp_sp_neighbor), 
     col="green", 
     add=TRUE)
```

#### Calculating edge costs

The cost of each edge is the distance between its nodes.

```{r}
lcosts <- nbcosts(nga_wp.neighbor, nga_wp_cv_neighbor)
```

For each observation, this gives the pairwise dissimilarity between its values on the five variables and the values for the neighboring observation (from the neighbor list). Basically, this is the notion of a generalized weight for a spatial weights matrix.

```{r}
nga_wp.w <- nb2listw(nga_wp.neighbor, 
                   lcosts, 
                   style="B")
summary(nga_wp.w)
```

### Computing minimum spanning tree

We use *mstree()* of **spdep** package to compute the minimum spanning tree.

```{r}
nga_wp.mst <- mstree(nga_wp.w)
```

After computing the MST, we will check its class and dimension.

```{r}
class(nga_wp.mst)
```

```{r}
dim(nga_wp.mst)
```

The dimension is 772 instead of our current observations of 773 (after removing Bakassi township). This is because the minimum spanning tree consists on n-1 links in order to traverse all the nodes. We use *head()* to check the content.

```{r}
head(nga_wp.mst)
```

The plot method for MST will be able to show the observation numbers of nodes in addition to the edge. When we plot this together with the township boundary, we will not see how the initial neighbor list is simplified to just one link connecting each of the nodes, while passing through all of them.

```{r}
plot(nga_wp_sp_neighbor, border=gray(.5))
plot.mst(nga_wp.mst, 
         coordinates(nga_wp_sp_neighbor), 
         col="green", 
         cex.lab=0.7, 
         cex.circles=0.005, 
         add=TRUE)
```

### Computing spatially constrained clusters using SKATER method

We are going to use *skater()* of **spdep** to calculate the spatially constrained cluster. Not that the *skater()* needs 3 mandatory arguments: - the first 2 columns of the MST matrix, the data matrix and the number of cuts. The number of cuts must be set to **one less than the number of clusters**. We learned earlier that the recommended number of cluster is 9, hence the value that needs to be specified here is one less than that i.e., 8.

```{r}
clust9 <- spdep::skater(edges = nga_wp.mst[,1:2], 
                 data = nga_wp_cv_neighbor, 
                 method = "euclidean", 
                 ncuts = 8)
```

We use below code chunk to inspect the result of *skater()*.

```{r}
str(clust9)
```

We can use below code chunk to check the cluster assignment.

```{r}
ccs9 <- clust9$groups
ccs9
```

We can also use below code chunk to find out how many observations in each cluster.

```{r}
table(ccs9)
```

If we plot the pruned tree that shows the 9 clusters on top of the township area.

```{r}
plot(nga_wp_sp_neighbor, border=gray(.5))
plot(clust9, 
     coordinates(nga_wp_sp_neighbor), 
     cex.lab=.7,
     groups.colors=c("yellow","green","blue", "brown", "pink", "red", "light blue", "orange"),
     cex.circles=0.005, 
     add=TRUE)
```

### Visualizing the clusters in choropleth map

First we will need to recompute the cluster as we removed 1 observation.

```{r}
nga_wp_cluster_new <- cbind(nga_wp, "CLUSTER")
```

```{r}
groups_mat <- as.matrix(clust9$groups)
nga_wp_spatialcluster <- cbind(nga_wp_cluster_new, as.factor(groups_mat)) %>%
  rename(`SP_CLUSTER`=`as.factor.groups_mat.`)
qtm(nga_wp_spatialcluster, "SP_CLUSTER")
```

We then put both hierarchical and spatially constrained clustering maps next to each other for comparison.

```{r}
hclust.map <- qtm(nga_wp_cluster,
                  "CLUSTER") + 
  tm_borders(alpha = 0.5) 

shclust.map <- qtm(nga_wp_spatialcluster,
                   "SP_CLUSTER") + 
  tm_borders(alpha = 0.5) 

tmap_arrange(hclust.map, shclust.map,
             asp=NA, ncol=2)
```

We can see that the clustering using SKATER is dominating and have grouped a large number of connecting townships together, that will not give us good enough regionalization insights.

## Spatially Constrained Clustering: ClustGeo Method

ClustGeo package can be used to perform non-spatially constrained hierarchical cluster analysis and spatially constrained cluster analysis.

### Ward-like hierarchical clustering: ClustGeo

We first use the *hclusgeo()* function to perform a typical Ward-like hierarchical clustering. To perform non-spatially constrained hierarchical clustering, we only need the dissimilarity matrix.

Again, here we need to recalculate the proxmat since we dropped 1 observation.

```{r}
proxmat_New <- dist(nga_wp_cv_neighbor, method = 'euclidean')
```

```{r}
nongeo_cluster <- hclustgeo(proxmat_New)
plot(nongeo_cluster, cex = 0.5)
rect.hclust(nongeo_cluster, 
            k = 9, 
            border = 2:5)
```

### Mapping the clusters formed

```{r}
groups <- as.factor(cutree(nongeo_cluster, k=9))
```

```{r}
nga_wp_ngeo_cluster <- cbind(nga_wp, as.matrix(groups)) %>%
  rename(`CLUSTER` = `as.matrix.groups.`)
```

```{r}
qtm(nga_wp_ngeo_cluster, "CLUSTER")
```

### Spatially Constrained Hierarchical Clustering

Before we can compute the spatially constrained hierarchical clustering, we need to use \*st_distance()\* of **sf** package to derive a spatial distance matrix.

```{r}
dist <- st_distance(nga_wp, nga_wp,)
distmat <- as.dist(dist)
```

Next, we use *choicealpha()* to determine a suitable value for the mixing parameter alpha using below code chunk.

```{r}
cr <- choicealpha(proxmat_New, distmat, range.alpha = seq(0, 1, 0.1), K=9, graph = TRUE)
```

Looking at the results of the graphs, we will use alpha = 0.4.

```{r}
clustG <- hclustgeo(proxmat_New, distmat, alpha = 0.4)
```

After that, we use *cutree()* to derive the cluster object.

```{r}
groups <- as.factor(cutree(clustG, k=9))
```

Lastly, we will join back the group list with *nga_wp* polygon feature data frame using the code chunk below.

```{r}
nga_wp_Gcluster <- cbind(nga_wp, as.matrix(groups)) %>%
  rename(`CLUSTER` = `as.matrix.groups.`)
```

We can now plot the map of the newly delineated spatially constrained clusters.

```{r}
qtm(nga_wp_Gcluster, "CLUSTER")
```

Again, we can compare this side-by-side with the SKATER map to spot the difference.

```{r}
shclust.map <- qtm(nga_wp_spatialcluster,
                   "SP_CLUSTER") + 
  tm_borders(alpha = 0.5) 

sfclust.map <- qtm(nga_wp_Gcluster,
                  "CLUSTER") + 
  tm_borders(alpha = 0.5) 

tmap_arrange(shclust.map, sfclust.map,
             asp=NA, ncol=2)
```

We can see that the ClustGeo version is not as dominating and may be able to provide more non-spatial insights.

## Multivariate Visualization

We can use parallel coordinate plot to reveal the patterns in clustering variables by cluster effectively. We will be using *ggparcoord()* of **GGally** package.

```{r}
ggparcoord(data = nga_wp_ngeo_cluster, 
           columns = c(14:17,19), 
           scale = "globalminmax",
           alphaLines = 0.2,
           boxplot = TRUE, 
           title = "Multiple Parallel Coordinates Plots of Water Point Variables by Cluster") +
  facet_grid(~ CLUSTER) + 
  theme(axis.text.x = element_text(angle = 30))
```

We can see that there are lowest number of functional water points in Cluster 2 townships, whereas Cluster 8 and 9 have relatively high number of water points using hand pump technique in the rural areas.

We use below code chunk to derive the mean values of the clustering variables.

```{r}
nga_wp_ngeo_cluster %>% 
  st_set_geometry(NULL) %>%
  group_by(CLUSTER) %>%
  summarise(mean_pct_functional = mean(pct_functional),
            mean_pct_non_functional = mean(pct_non_functional),
            mean_pct_handpump = mean(pct_handpump),
            mean_pct_highusage = mean(pct_highusage),
            mean_pct_rural = mean(pct_rural))
```
