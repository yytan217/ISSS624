---
title: "Hands-on Exercise 1: Geospatial Data Wrangling with R"
editor: visual
---

## Overview

In this first hands-on exercise, I learned how to import and wrangling geospatial data using appropriate R packages.

## Getting Started

The code chunk below installs and loads 2 packages, **sf** and **tidyverse** into R environment.

```{r}
pacman::p_load(sf, tidyverse)
```

## Importing Geospatial Data

### Importing polygon feature data

```{r}
mpsz <- st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_WEB_PL")
```

### Importing polyline feature data

```{r}
cyclingpath = st_read(dsn = "data/geospatial", 
                         layer = "CyclingPathGazette")
```

### Importing GIS data in kml format

```{r}
preschool = st_read("data/geospatial/preschools-location.kml")
```

Notice here preschool data is in **WGS 84** coordinates system that is different from the earlier 2 simple feature data frame, which are in **SVY21**.

## Extracting Content from Simple Feature Data Frame

### Using *st_geometry()*

```{r}
st_geometry(mpsz)
```

### Using *glimpse()*

```{r}
glimpse(mpsz)
```

### Using *head()*

```{r}
head(mpsz, n=5) 
```

## Plotting the Geospatial data

Default plot of an sf object is a multi-plot, up to a reasonable maximum as shown here.

```{r}
plot(mpsz)
```

If we choose to plot only the geometry:

```{r}
plot(st_geometry(mpsz))
```

We can also choose to plot the sf object by using a specific attribute.

```{r}
plot(mpsz["PLN_AREA_C"])
```

## Working with Projection

### Assigning EPSG code

We start with the coordinate system of mpsz simple feature data frame.

```{r}
st_crs(mpsz)
```

To assign the correct EPSG code:

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

Recheck the CRS to ensure the EPSG code is now 3414.

```{r}
st_crs(mpsz3414)
```

### Projection Transformation

We can transform the original data from geographic coordinate system to projected coordinate system using this code chunk.

```{r}
preschool3414 <- st_transform(preschool, 
                              crs = 3414)
```

Now, when we display the preschool3414 content we can see that the CRS has been updated.

```{r}
st_geometry(preschool3414)
```

## Importing and Converting Aspatial Data

### Importing aspatial data

```{r}
listings <- read_csv("data/aspatial/listings.csv")
```

Check that the data file has been imported correctly.

```{r}
list(listings) 
```

### Creating a simple feature data frame

```{r}
listings_sf <- st_as_sf(listings, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)
```

```{r}
glimpse(listings_sf)
```

## Geoprocessing using sf package

### Buffering

Scenario: The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.

We first calculate the 5m buffers around cycling paths:

```{r}
buffer_cycling <- st_buffer(cyclingpath, 
                               dist=5, nQuadSegs = 30)
```

And then we compute the area of the buffers.

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

Lastly we use *sum()* to derive the total land involved.

```{r}
sum(buffer_cycling$AREA)
```

### Point-in-polygon count

Scenario 1: A pre-school service group want to find out the numbers of pre-schools in each planning subzone.

We start with using this code chunk to perform 2 tasks - (1) identify pre-schools inside each planning subzone, (2) calculate the number of preschools that fall inside each planning subzone.

```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
```

Now when we look at the summary statistics of the newly derived PreSch Count field:

```{r}
summary(mpsz3414$`PreSch Count`)
```

To see the planning subzone with the most number of pre-schools:

```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```

Scenario 2: Calculate the density of pre-schools by planning subzone.

First we find out the area of each planning subzone:

```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area()
```

Next we compute the density:

```{r}
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

## **Exploratory Data Analysis (EDA)**

```{r}
hist(mpsz3414$`PreSch Density`)
```

```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

We can use a scatterplot to show the relationship between Pre-school density and Pre-school count.

```{r}
ggplot(data=mpsz3414, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black", 
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```
